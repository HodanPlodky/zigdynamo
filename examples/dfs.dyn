let createnode = fn(val) = object {
    val : val,
    next: nil,
};

let createlist = fn() = object {
    head: nil,
    
    append: fn(val) = {
        if (this.head == nil) {
            this.head = createnode(val);
        } else {
            let tmp = this.head;
            while (tmp.next != nil) {
                tmp = tmp.next;
            };
            tmp.next = createnode(val);
        };
    },

    prepend: fn(val) = {
        let tmp = this.head;
        this.head = createnode(val);
        this.head.next = tmp;
    },

    pop: fn() = {
        if (this.head == nil) {

        } else if (this.head.next == nil) {
            let tmp = this.head;
            this.head == nil;
            tmp.val;
        } else {
            let tmp = this.head;
            while (tmp.next.next != nil) {
                tmp = tmp.next;
            };
            let res = tmp.val;
            tmp.next = nil;
            res;
        };
    },

    debug: fn() = {
        let tmp = this.head;
        while (tmp != nil) {
            print(tmp.val);
            tmp = tmp.next;
        };
    },

    get: fn(index) = {
        let i = 0;
        let curr = this.head;
        while (i < index) {
            i = i + 1;
            curr = curr.next;
        };
        curr;
    },
};


let create_graph = fn() = object {
    max_id: 0,
    verts: createlist(),

    create_vertex: fn() = {
        let res = object {
            id: this.max_id,
            edges: createlist(),

            create_edge: fn(to) = {
                this.edges.prepend(to);
            },

            debug: fn() = {
                print(this.max_id);
            },
        };
        this.max_id = this.max_id + 1;
        res;
    },

    add_vert: fn() = {
        this.verts.append(this.create_vertex());
    },
    
    create_edge: fn(from, to) = {
        this.verts.get(from).create_edge(to);
    },

    create_bothway_edge: fn(from, to) = {
        this.create_edge(from, to);
        this.create_edge(to, from);
    },

    debug: fn() = {

    },
};
